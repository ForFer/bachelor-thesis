{"ast":null,"code":"var _jsxFileName = \"/home/fernando/tfg/portal/reactfront/src/components/generic/input/input.jsx\";\nimport React from 'react';\nimport styles from './input.module.css';\n\n// realmente este componente no hace falta hacerlo generico, ha sido mas sacarse la polla,\n// slash demostrar como usar FlowTypes y React en general. Este componente tiene un 'bug',\n// y es que es uncontrolled porque value es un Prop, no State. Esto tiene 2 soluciones:\n//\n// 1) sacar de aqui el input y copypastearlo en <Login /> (pasando la function de onchange correcta alli, y el valor directo del hook)\n// 2) crear un estado local aqui (useState) y recibir el handler de <Login /> como prop para que el <login/> sepa cual es el valor actual de input.\n//\nvar Input = function Input(_ref) {\n  var label = _ref.label,\n      _onChange = _ref.onChange,\n      type = _ref.type,\n      value = _ref.value,\n      required = _ref.required;\n  return React.createElement(\"input\", {\n    className: styles.input,\n    type: type,\n    value: value,\n    placeholder: label,\n    onChange: function onChange(event) {\n      return _onChange(event.target.value);\n    },\n    required: required,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n};\n\nInput.defaultProps = {\n  type: 'text',\n  required: false\n};\nexport default Input;","map":{"version":3,"sources":["/home/fernando/tfg/portal/reactfront/src/components/generic/input/input.jsx"],"names":["React","styles","Input","label","onChange","type","value","required","input","event","target","defaultProps"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAMC,KAAN,QAAMA,KAAN;AAAA,MAAaC,SAAb,QAAaA,QAAb;AAAA,MAAuBC,IAAvB,QAAuBA,IAAvB;AAAA,MAA6BC,KAA7B,QAA6BA,KAA7B;AAAA,MAAoCC,QAApC,QAAoCA,QAApC;AAAA,SACZ;AACE,IAAA,SAAS,EAAEN,MAAM,CAACO,KADpB;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,WAAW,EAAEH,KAJf;AAKE,IAAA,QAAQ,EAAE,kBAAAM,KAAK;AAAA,aAAIL,SAAQ,CAACK,KAAK,CAACC,MAAN,CAAaJ,KAAd,CAAZ;AAAA,KALjB;AAME,IAAA,QAAQ,EAAEC,QANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY;AAAA,CAAd;;AAWAL,KAAK,CAACS,YAAN,GAAqB;AACnBN,EAAAA,IAAI,EAAE,MADa;AAEnBE,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,eAAeL,KAAf","sourcesContent":["// @flow\nimport React from 'react';\n\nimport styles from './input.module.css';\n\ntype InputType = 'email' | 'text' | 'password';\n\ntype Props<T> = {|\n  label: string,\n  onChange: (value: T) => void,\n  type: InputType,\n  value: T,\n  required?: boolean\n|};\n\n// realmente este componente no hace falta hacerlo generico, ha sido mas sacarse la polla,\n// slash demostrar como usar FlowTypes y React en general. Este componente tiene un 'bug',\n// y es que es uncontrolled porque value es un Prop, no State. Esto tiene 2 soluciones:\n//\n// 1) sacar de aqui el input y copypastearlo en <Login /> (pasando la function de onchange correcta alli, y el valor directo del hook)\n// 2) crear un estado local aqui (useState) y recibir el handler de <Login /> como prop para que el <login/> sepa cual es el valor actual de input.\n//\nconst Input = <T>({ label, onChange, type, value, required }: Props<T>) => (\n  <input\n    className={styles.input}\n    type={type}\n    value={value}\n    placeholder={label}\n    onChange={event => onChange(event.target.value)}\n    required={required}\n  /> \n);\n\nInput.defaultProps = {\n  type: 'text',\n  required: false\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}